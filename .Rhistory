donor <- read.csv("C:/Users/Jeff/Downloads/donation data.csv")
codes <- read.csv("C:/Users/Jeff/Downloads/dmef1code.csv")
donor$DONATED <- as.numeric(donor$TARGDOL > 0)
donor <- donor[,c('ID','DONATED','TARGDOL','STATCODE','SEX','CNTRLIF','CNTMLIF','CONLARG','CONTRFST','CNDOL1','CNDOL2','CNDOL3','CNCOD1','CNCOD2','CNCOD3','CNDAT1','CNDAT2','CNDAT3','CNMON1','CNMON2','CNMON3','CNMONF','CNMONL')]
# Calculating months between latest and 2nd latest
donor$cadence1 <- donor$CNDAT1 - donor$CNDAT2
donor$cadence2 <- donor$CNDAT2 - donor$CNDAT3
donor$cadence_final <- ifelse(donor$cadence1 - donor$cadence2 == 0, donor$cadence1, NA)
frequency_table <- as.data.frame(table(donor$cadence_final))#  Frequency Table
frequency_table
plot(x = frequency_table$Var1, y = frequency_table$Freq / sum(frequency_table$Freq), labels = TRUE)
#Calculating donations forthcoming based on cadence
donor$cadence_due <-  (192 - donor$cadence_final == donor$CNDAT1 |
191 - donor$cadence_final == donor$CNDAT1 |
190 - donor$cadence_final == donor$CNDAT1 )
table1 <- table(donor$DONATED,donor$cadence_due)
sum(diag(table1))/sum(table1) # Overall correct rate = 60%
table1[1,1]/sum(table1[1,]) # Correctly identified those that DID NOT donated = 80%
table1[2,2]/sum(table1[2,]) # Correctly identified those that DID donate = 30%
donor2 <- merge(donor, codes, by.x="CNCOD1", by.y="CODE", all.x=TRUE)
View(donor2)
View(donor2)
donor <- merge(donor, codes, by.x="CNCOD1", by.y="CODE", all.x=TRUE)
names(merged)[names(merged) == 'CODETYPE'] <- 'CNCOD1TYPE'
names(donor)[names(donor) == 'CODETYPE'] <- 'CNCOD1TYPE'
View(donor)
View(donor)
rm(donor2)
rm(frequency_table)
rm(table1)
donor <- merge(donor, codes, by.x="CNCOD1", by.y="CODE", all.x=TRUE) #Merge code types for CNCOD1
names(donor)[names(donor) == 'CODETYPE'] <- 'CNCOD1TYPE'
donor <- merge(donor, codes, by.x="CNCOD2", by.y="CODE", all.x =TRUE) #Merge code types for CNCOD2
names(donor)[names(donor) == 'CODETYPE'] <- 'CNCOD2TYPE'
donor <- merge(donor, codes, by.x="CNCOD3", by.y="CODE", all.x =TRUE) #Merge code types for CNCOD3
names(donor)[names(donor) == 'CODETYPE'] <- 'CNCOD3TYPE'
donor <- read.csv("C:/Users/Jeff/Downloads/donation data.csv")
codes <- read.csv("C:/Users/Jeff/Downloads/dmef1code.csv")
### Reordering Variables
donor$DONATED <- as.numeric(donor$TARGDOL > 0)
donor <- donor[,c('ID','DONATED','TARGDOL','STATCODE','SEX','CNTRLIF','CNTMLIF','CONLARG','CONTRFST','CNDOL1','CNDOL2','CNDOL3','CNCOD1','CNCOD2','CNCOD3','CNDAT1','CNDAT2','CNDAT3','CNMON1','CNMON2','CNMON3','CNMONF','CNMONL')]
# Calculating months between latest and 2nd latest
donor$cadence1 <- donor$CNDAT1 - donor$CNDAT2
donor$cadence2 <- donor$CNDAT2 - donor$CNDAT3
donor$cadence_final <- ifelse(donor$cadence1 - donor$cadence2 == 0, donor$cadence1, NA)
#Calculating donations forthcoming based on cadence
donor$cadence_due <-  (192 - donor$cadence_final == donor$CNDAT1 |
191 - donor$cadence_final == donor$CNDAT1 |
190 - donor$cadence_final == donor$CNDAT1 )
# Calculating if the Cadence was correct
donor$cadence_correct <- as.numeric(donor$cadence_due) == donor$DONATED
# Creating donors that have dontated three months from our test period. NOTE that we
# have 0 donations for our 3 month time frame, because we are 4 months from our test period
donor$MONTHS3 <- as.numeric(donor$CNDAT1 == 189 | donor$CNDAT1 == 188 | donor$CNDAT1 == 187)
donor$MONTHS6 <- as.numeric(donor$CNDAT1 == 186 | donor$CNDAT1 == 185 | donor$CNDAT1 == 184)
donor$MONTHS12 <- as.numeric(donor$CNDAT1 == 180 | donor$CNDAT1 == 179 | donor$CNDAT1 == 178)
donor <- merge(donor, codes, by.x="CNCOD1", by.y="CODE", all.x=TRUE) #Merge code types for CNCOD1
names(donor)[names(donor) == 'CODETYPE'] <- 'CNCOD1TYPE'
donor <- merge(donor, codes, by.x="CNCOD2", by.y="CODE", all.x =TRUE) #Merge code types for CNCOD2
names(donor)[names(donor) == 'CODETYPE'] <- 'CNCOD2TYPE'
donor <- merge(donor, codes, by.x="CNCOD3", by.y="CODE", all.x =TRUE) #Merge code types for CNCOD3
names(donor)[names(donor) == 'CODETYPE'] <- 'CNCOD3TYPE'
donor$CNCOD3 <- NULL
donor$CNCOD2 <- NULL
donor$CNCOD1 <- NULL
donor$slope1 <- (donor$CNDOL1 - donor$CNDOL2) / donor$CNDOL1
donor$slope2 <- (donor$CNDOL2 - donor$CNDOL3) / donor$CNDOL2
View(donor)
donor$slope1 <- (donor$CNDOL1 - donor$CNDOL2) / donor$CNDOL1
donor$slope2 <- (donor$CNDOL2 - donor$CNDOL3) / donor$CNDOL2
donor$slope1_pos <- as.numeric(donor$slope1 > 0)
donor$slope1_neut <- as.numeric(donor$slope1 == 0)
donor$slope1_neg <- as.numeric(donor$slope1 < 0)
donor$slope2_pos <- as.numeric(donor$slope1 > 0)
donor$slope2_neut <- as.numeric(donor$slope1 == 0)
donor$slope2_neg <- as.numeric(donor$slope1 < 0)
donor$trendup <- as.numeric((donor$slope1_pos == 1 | donor$slope1_neut == 1) &
(donor$slope2_pos == 1 | donor$slope2_neut == 1 | donor$slope2 == NA))
donor$trendup <- as.numeric((donor$slope1_pos == 1 | donor$slope1_neut == 1) &
(donor$slope2_pos == 1 | donor$slope2_neut == 1 | is.na(donor$slope2)))
donor$trenddown <- as.numeric((donor$slope1_neg == 1 | donor$slope1_neut == 1) &
(donor$slope2_neg == 1 | donor$slope2_neut == 1 | is.na(donor$slope2)))
donor$trendsteady <- as.numeric((donor$slope1_neut == 1) &
(donor$slope2_neut == 1 | is.na(donor$slope2)))
###########################################
###                                     ###
###          Variable Creation          ###
###                                     ###
###########################################
### Read Data
donor <- read.csv("C:/Users/Jeff/Downloads/donation data.csv")
codes <- read.csv("C:/Users/Jeff/Downloads/dmef1code.csv")
### Reordering Variables
donor$DONATED <- as.numeric(donor$TARGDOL > 0)
donor <- donor[,c('ID','DONATED','TARGDOL','STATCODE','SEX','CNTRLIF','CNTMLIF','CONLARG','CONTRFST','CNDOL1','CNDOL2','CNDOL3','CNCOD1','CNCOD2','CNCOD3','CNDAT1','CNDAT2','CNDAT3','CNMON1','CNMON2','CNMON3','CNMONF','CNMONL')]
# Calculating months between latest and 2nd latest
donor$cadence1 <- donor$CNDAT1 - donor$CNDAT2
donor$cadence2 <- donor$CNDAT2 - donor$CNDAT3
donor$cadence_final <- ifelse(donor$cadence1 - donor$cadence2 == 0, donor$cadence1, NA)
#Calculating donations forthcoming based on cadence
donor$cadence_due <-  (192 - donor$cadence_final == donor$CNDAT1 |
191 - donor$cadence_final == donor$CNDAT1 |
190 - donor$cadence_final == donor$CNDAT1 )
# Calculating if the Cadence was correct
donor$cadence_correct <- as.numeric(donor$cadence_due) == donor$DONATED
# Creating donors that have dontated three months from our test period. NOTE that we
# have 0 donations for our 3 month time frame, because we are 4 months from our test period
donor$MONTHS3 <- as.numeric(donor$CNDAT1 == 189 | donor$CNDAT1 == 188 | donor$CNDAT1 == 187)
donor$MONTHS6 <- as.numeric(donor$CNDAT1 == 186 | donor$CNDAT1 == 185 | donor$CNDAT1 == 184)
donor$MONTHS12 <- as.numeric(donor$CNDAT1 == 180 | donor$CNDAT1 == 179 | donor$CNDAT1 == 178)
#### Merging Codes
donor <- merge(donor, codes, by.x="CNCOD1", by.y="CODE", all.x=TRUE) #Merge code types for CNCOD1
names(donor)[names(donor) == 'CODETYPE'] <- 'CNCOD1TYPE'
donor <- merge(donor, codes, by.x="CNCOD2", by.y="CODE", all.x =TRUE) #Merge code types for CNCOD2
names(donor)[names(donor) == 'CODETYPE'] <- 'CNCOD2TYPE'
donor <- merge(donor, codes, by.x="CNCOD3", by.y="CODE", all.x =TRUE) #Merge code types for CNCOD3
names(donor)[names(donor) == 'CODETYPE'] <- 'CNCOD3TYPE'
donor$CNCOD3 <- NULL
donor$CNCOD2 <- NULL
donor$CNCOD1 <- NULL
donor$slope1 <- (donor$CNDOL1 - donor$CNDOL2) / donor$CNDOL1
donor$slope2 <- (donor$CNDOL2 - donor$CNDOL3) / donor$CNDOL2
donor$slope1 <- (donor$CNDOL1 - donor$CNDOL2) / donor$CNDOL1
donor$slope2 <- (donor$CNDOL2 - donor$CNDOL3) / donor$CNDOL2
donor$slope1_pos <- as.numeric(donor$slope1 > 0)
donor$slope1_neut <- as.numeric(donor$slope1 == 0)
donor$slope1_neg <- as.numeric(donor$slope1 < 0)
donor$slope2_pos <- as.numeric(donor$slope1 > 0)
donor$slope2_neut <- as.numeric(donor$slope1 == 0)
donor$slope2_neg <- as.numeric(donor$slope1 < 0)
donor$trend <- ifelse(donor$slope1_pos == 1, 'Positive',
ifelse(donor$slope1_neut == 1 , 'Steady',
ifelse(donor$slope1_neg == 1 ,'Negative', NA)))
View(donor)
table(donor$DONATED, donor$trend)
prop.table(table(donor$DONATED, donor$trend))
barplot((table(donor$DONATED, donor$trend))
.
table(donor$DONATED, donor$trend)
prop.table(table(donor$DONATED, donor$trend),2)
barplot(prop.table(table(donor$DONATED, donor$trend),2)[2,])
table(donor$DONATED, donor$trend)
prop.table(table(donor$DONATED, donor$trend)
prop.table(table(donor$DONATED, donor$trend))
table(donor$DONATED, donor$trend)
prop.table(table(donor$DONATED, donor$trend))
prop.table(table(donor$DONATED, donor$trend),2)
rm(codes)
###########################################
###                                     ###
###          Variable Creation          ###
###                                     ###
###########################################
### Read Data
donor <- read.csv("C:/Users/Jeff/Downloads/donation data.csv")
codes <- read.csv("C:/Users/Jeff/Downloads/dmef1code.csv")
### Reordering Variables
donor$DONATED <- as.numeric(donor$TARGDOL > 0)
donor <- donor[,c('ID','DONATED','TARGDOL','STATCODE','SEX','CNTRLIF','CNTMLIF','CONLARG','CONTRFST','CNDOL1','CNDOL2','CNDOL3','CNCOD1','CNCOD2','CNCOD3','CNDAT1','CNDAT2','CNDAT3','CNMON1','CNMON2','CNMON3','CNMONF','CNMONL')]
# Calculating months between latest and 2nd latest
donor$cadence1 <- donor$CNDAT1 - donor$CNDAT2
donor$cadence2 <- donor$CNDAT2 - donor$CNDAT3
donor$cadence_final <- ifelse(donor$cadence1 - donor$cadence2 == 0, donor$cadence1, NA)
#Calculating donations forthcoming based on cadence
donor$cadence_due <-  (192 - donor$cadence_final == donor$CNDAT1 |
191 - donor$cadence_final == donor$CNDAT1 |
190 - donor$cadence_final == donor$CNDAT1 )
# Calculating if the Cadence was correct
donor$cadence_correct <- as.numeric(donor$cadence_due) == donor$DONATED
# Creating donors that have dontated three months from our test period. NOTE that we
# have 0 donations for our 3 month time frame, because we are 4 months from our test period
donor$MONTHS3 <- as.numeric(donor$CNDAT1 == 189 | donor$CNDAT1 == 188 | donor$CNDAT1 == 187)
donor$MONTHS6 <- as.numeric(donor$CNDAT1 == 186 | donor$CNDAT1 == 185 | donor$CNDAT1 == 184)
donor$MONTHS12 <- as.numeric(donor$CNDAT1 == 180 | donor$CNDAT1 == 179 | donor$CNDAT1 == 178)
#### Merging Codes
donor <- merge(donor, codes, by.x="CNCOD1", by.y="CODE", all.x=TRUE) #Merge code types for CNCOD1
names(donor)[names(donor) == 'CODETYPE'] <- 'CNCOD1TYPE'
donor <- merge(donor, codes, by.x="CNCOD2", by.y="CODE", all.x =TRUE) #Merge code types for CNCOD2
names(donor)[names(donor) == 'CODETYPE'] <- 'CNCOD2TYPE'
donor <- merge(donor, codes, by.x="CNCOD3", by.y="CODE", all.x =TRUE) #Merge code types for CNCOD3
names(donor)[names(donor) == 'CODETYPE'] <- 'CNCOD3TYPE'
donor$CNCOD3 <- NULL
donor$CNCOD2 <- NULL
donor$CNCOD1 <- NULL
rm(codes)
### Slope
donor$SLOPE1 <- (donor$CNDOL1 - donor$CNDOL2) / donor$CNDOL1
donor$SLOPE2 <- (donor$CNDOL2 - donor$CNDOL3) / donor$CNDOL2
donor$slope1_pos <- as.numeric(donor$SLOPE1 > 0)
donor$slope1_neut <- as.numeric(donor$SLOPE1 == 0)
donor$slope1_neg <- as.numeric(donor$SLOPE1 < 0)
donor$slope2_pos <- as.numeric(donor$SLOPE2 > 0)
donor$slope2_neut <- as.numeric(donor$SLOPE2 == 0)
donor$slope2_neg <- as.numeric(donor$SLOPE2 < 0)
donor$TREND <- ifelse(donor$slope1_pos == 1, 'Positive',
ifelse(donor$slope1_neut == 1 , 'Steady',
ifelse(donor$slope1_neg == 1 ,'Negative', NA)))
### Maybe for simplicicties sake, just look at the slope1
barplot(prop.table(table(donor$DONATED, donor$trend),2)[2,])
table(donor$DONATED, donor$TREND)
prop.table(table(donor$DONATED, donor$TREND),2)
barplot(prop.table(table(donor$DONATED, donor$TREND),2)[2,])
# Slope doesn't have any impact. In fact, positive trends did worse than negative trends.
View(donor)
donor <- subset(donor, TARGDOL < 100 <= 100))
donor <- subset(donor, TARGDOL <= 100))
donor <- subset(donor, TARGDOL <= 100)
### Taking Test and Training Data set
training <- donor[donor$ID %% 2 == 0 ,]
test <- donor[donor$ID %% 2 != 0 , ]
View(test)
fit = glm(DONATED ~
CNDOL1 +
SLOPE1 +
CNTRLIF + #Multicollinearity problem with CNTMLIF
MONTH6 +
MONTH12 +
CNTMLIF +
SEX$B +
CNMON1
,family=binomial, data = training)
summary(fit)
donor$MONTHS3 <- as.numeric(donor$CNDAT1 == 189 | donor$CNDAT1 == 188 | donor$CNDAT1 == 187)
donor$MONTHS6 <- as.numeric(donor$CNDAT1 == 186 | donor$CNDAT1 == 185 | donor$CNDAT1 == 184)
donor$MONTHS12 <- as.numeric(donor$CNDAT1 == 180 | donor$CNDAT1 == 179 | donor$CNDAT1 == 178)
fit = glm(DONATED ~
CNDOL1 +
SLOPE1 +
CNTRLIF + #Multicollinearity problem with CNTMLIF
MONTH6 +
MONTH12 +
CNTMLIF +
SEX$B +
CNMON1
,family=binomial, data = training)
fit = glm(DONATED ~
CNDOL1 +
SLOPE1 +
CNTRLIF +
MONTH6 +
MONTH12 +
CNTMLIF +
SEX$B +
CNMON1
,family=binomial, data = training)
###########################################
###                                     ###
###          Variable Creation          ###
###                                     ###
###########################################
### Read Data
donor <- read.csv("C:/Users/Jeff/Downloads/donation data.csv")
codes <- read.csv("C:/Users/Jeff/Downloads/dmef1code.csv")
### Reordering Variables
donor$DONATED <- as.numeric(donor$TARGDOL > 0)
donor <- donor[,c('ID','DONATED','TARGDOL','STATCODE','SEX','CNTRLIF','CNTMLIF','CONLARG','CONTRFST','CNDOL1','CNDOL2','CNDOL3','CNCOD1','CNCOD2','CNCOD3','CNDAT1','CNDAT2','CNDAT3','CNMON1','CNMON2','CNMON3','CNMONF','CNMONL')]
# Calculating months between latest and 2nd latest
donor$cadence1 <- donor$CNDAT1 - donor$CNDAT2
donor$cadence2 <- donor$CNDAT2 - donor$CNDAT3
donor$cadence_final <- ifelse(donor$cadence1 - donor$cadence2 == 0, donor$cadence1, NA)
#Calculating donations forthcoming based on cadence
donor$cadence_due <-  (192 - donor$cadence_final == donor$CNDAT1 |
191 - donor$cadence_final == donor$CNDAT1 |
190 - donor$cadence_final == donor$CNDAT1 )
# Calculating if the Cadence was correct
donor$cadence_correct <- as.numeric(donor$cadence_due) == donor$DONATED
# Creating donors that have dontated three months from our test period. NOTE that we
# have 0 donations for our 3 month time frame, because we are 4 months from our test period
donor$MONTHS3 <- as.numeric(donor$CNDAT1 == 189 | donor$CNDAT1 == 188 | donor$CNDAT1 == 187)
donor$MONTHS6 <- as.numeric(donor$CNDAT1 == 186 | donor$CNDAT1 == 185 | donor$CNDAT1 == 184)
donor$MONTHS12 <- as.numeric(donor$CNDAT1 == 180 | donor$CNDAT1 == 179 | donor$CNDAT1 == 178)
#### Merging Codes
donor <- merge(donor, codes, by.x="CNCOD1", by.y="CODE", all.x=TRUE) #Merge code types for CNCOD1
names(donor)[names(donor) == 'CODETYPE'] <- 'CNCOD1TYPE'
donor <- merge(donor, codes, by.x="CNCOD2", by.y="CODE", all.x =TRUE) #Merge code types for CNCOD2
names(donor)[names(donor) == 'CODETYPE'] <- 'CNCOD2TYPE'
donor <- merge(donor, codes, by.x="CNCOD3", by.y="CODE", all.x =TRUE) #Merge code types for CNCOD3
names(donor)[names(donor) == 'CODETYPE'] <- 'CNCOD3TYPE'
donor$CNCOD3 <- NULL
donor$CNCOD2 <- NULL
donor$CNCOD1 <- NULL
rm(codes)
### Slope
donor$SLOPE1 <- (donor$CNDOL1 - donor$CNDOL2) / donor$CNDOL1
donor$SLOPE2 <- (donor$CNDOL2 - donor$CNDOL3) / donor$CNDOL2
donor$slope1_pos <- as.numeric(donor$SLOPE1 > 0)
donor$slope1_neut <- as.numeric(donor$SLOPE1 == 0)
donor$slope1_neg <- as.numeric(donor$SLOPE1 < 0)
donor$slope2_pos <- as.numeric(donor$SLOPE2 > 0)
donor$slope2_neut <- as.numeric(donor$SLOPE2 == 0)
donor$slope2_neg <- as.numeric(donor$SLOPE2 < 0)
donor$TREND <- ifelse(donor$slope1_pos == 1, 'Positive',
ifelse(donor$slope1_neut == 1 , 'Steady',
ifelse(donor$slope1_neg == 1 ,'Negative', NA)))
### Maybe for simplicicties sake, just look at the slope1
donor <- subset(donor, TARGDOL <= 100)
### Taking Test and Training Data set
training <- donor[donor$ID %% 2 == 0 ,]
test <- donor[donor$ID %% 2 != 0 , ]
View(training)
fit = glm(DONATED ~
CNDOL1 +
SLOPE1 +
CNTRLIF +
MONTH6 +
MONTH12 +
CNTMLIF +
SEX$B +
CNMON1
,family=binomial, data = training)
fit = glm(DONATED ~
CNDOL1 +
SLOPE1 +
CNTRLIF +
MONTHS6 +
MONTHS12 +
CNTMLIF +
SEX$B +
CNMON1
,family=binomial, data = training)
frequency_table <- as.data.frame(table(donor$cadence_final))#  Frequency Table
frequency_table
plot(x = frequency_table$Var1, y = frequency_table$Freq / sum(frequency_table$Freq), labels = TRUE)
frequency_table$Freq / sum(frequency_table$Freq)
frequency_table$Freq / sum(frequency_table$Freq)*100
as.data.table(frequency_table$Freq / sum(frequency_table$Freq)*100)
as.data.frame(frequency_table$Freq / sum(frequency_table$Freq)*100)
plot(x = frequency_table$Var1, y = frequency_table$Freq / sum(frequency_table$Freq), labels = TRUE)
plot(x = frequency_table$Var1, y = (frequency_table$Freq / sum(frequency_table$Freq))*100, labels = TRUE)
plot(x = frequency_table$Var1, y = (frequency_table$Freq / sum(frequency_table$Freq))*100, xlab = "Months of Cadence", ylab = "Percent of Cadences", title = "Percent of Cadences")
plot(x = frequency_table$Var1, y = (frequency_table$Freq / sum(frequency_table$Freq))*100, xlab = "Months of Cadence", ylab = "Percent of Cadences", main = "Percent of Cadences")
barplot(x = frequency_table$Var1, y = (frequency_table$Freq / sum(frequency_table$Freq))*100, xlab = "Months of Cadence", ylab = "Percent of Cadences", main = "Percent of Cadences")
table2 <- table(donor$cadence_correct, donor$cadence_final)
prop.table(table2,2)
plot(prop.table(table2,2)[2,])
barplot(prop.table(table2,2)[2,])
barplot(prop.table(table2,2)[2,], xlab = "% Correctly Predicted", ylab = "Months of Cadence", main = "Accuracy of Cadnece")
barplot(prop.table(table2,2)[2,24], xlab = "% Correctly Predicted", ylab = "Months of Cadence", main = "Accuracy of Cadnece")
barplot(prop.table(table2,2)[2,1:24], xlab = "% Correctly Predicted", ylab = "Months of Cadence", main = "Accuracy of Cadnece")
barplot(prop.table(table2,2)[2,1:24], ylab = "% Correctly Predicted", xlab = "Months of Cadence", main = "Accuracy of Cadnece")
plot(x = donor$SEX, y = donor$DONATED)
table1 <- table(donor$DONATED, donor$SEX)
table2 <- prop.table(table1, 2)
table2[2,]
barplot(table2[2,], main="Percentage of Each Gender Who Actually Donated",
xlab = "Gender Codes", ylab = "Percentage")
table(donor$SEX)
table(donor$SEX/nrow(donor))
table(donor$SEX)
prop.table(table(donor$SEX),1)
prop.table(table(donor$SEX),2)
prop.table(table(donor$SEX),1)
margin.table(table(donor$SEX),1)
margin.table(table(donor$SEX),2)
477/99191
